plugins {
    id 'org.springframework.boot' version '1.5.8.RELEASE'
    id 'org.sonarqube' version '2.6'
    id 'org.ajoberstar.grgit' version '2.2.0'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'application'
apply plugin: 'jacoco'

group = 'org.sitmun'
version = '0.1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()    
}

// Dependencies to other SITMUN plugins must be declared all here to facilitate using them
// in different places of this script
ext {    
    sitmunlibs = [:]
    sitmunlibs.sitmundemo = [
        gitrepo : 'https://github.com/sitmun/sitmun-plugin-core.git',
        groupId : 'org.sitmun',
        artifactId : 'sitmun-plugin-core',
        version : '0.1.0-SNAPSHOT'
    ]
}

dependencies {
    sitmunlibs.each { k,v -> implementation "${v.groupId}:${v.artifactId}:${v.version}" }
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2'

    if (project.hasProperty('oracle')) {
        implementation 'com.zaxxer:HikariCP:2.6.0'
        implementation 'com.oracle:ojdbc7:12.1.0.2'
    } else if (project.hasProperty('postgresql')) {
        implementation 'com.zaxxer:HikariCP:2.6.0'
        implementation 'org.postgresql:postgresql:42.2.2'
    } else {
        implementation 'com.h2database:h2'
        implementation 'org.springframework.boot:spring-boot-devtools'
    }
}

def profiles = 'h2'

bootRun {
    if (project.hasProperty('h2')) {
        profiles = 'h2'
    } else if (project.hasProperty('oracle')) {
        profiles = 'oracle'
    } else if (project.hasProperty('postgresql')) {
        profiles = 'postgresql'
    }
    args = ["--spring.profiles.active=" + profiles]
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId group
            artifactId 'sitmun-territorial-app'
            version version

            from components.java
        }
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'sitmun'
        property 'sonar.sources', 'src/main'
    }
}

task cloneSitmunPlugins() {
    description = 'Clone the git repositories declared in sitmunlibs to a temporary directory.'
    doLast {
        // Create temporary directory
        ext.plugindir = File.createTempDir().toString()
        sitmunlibs.each { k, v ->
            grgit.clone(dir: "${cloneSitmunPlugins.plugindir}/${v.artifactId}", uri: "${v.gitrepo}", refToCheckout: "${v.version}")
        }
    }
}

task installSitmunPlugins(dependsOn: 'cloneSitmunPlugins') {
    description = 'Install dependency repos, cleans and installs the git repositories declared in sitmunlibs in a temporary directory. Depends on cloneSitmunPlugins.'
    doLast {
        // It creates a temporary GradleBuild task for each sitmun dependency in sitmunlibs
        // and runs the specified tasks for each
        sitmunlibs.each { k,v ->
            def tempTask = tasks.create(name: "install_${v.artifactId}", type: GradleBuild)
            tempTask.buildFile = file("${cloneSitmunPlugins.plugindir}/${v.artifactId}/build.gradle")
            tempTask.tasks = ['clean', 'install']
            tempTask.execute()
        }
        // Delete temporary directory
        try {
            delete cloneSitmunPlugins.plugindir
        } catch (Exception e) {
            println("Temp directory ${cloneSitmunPlugins.plugindir} was not deleted. You can safely delete it afterwards.")
        }
    }
}

task install(dependsOn: ['publishToMavenLocal', 'installSitmunPlugins'])

