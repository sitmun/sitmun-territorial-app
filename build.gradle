plugins {
    id 'org.springframework.boot' version '1.5.8.RELEASE'
    id 'org.sonarqube' version '2.6'
    id 'org.ajoberstar.grgit' version '2.2.0'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'application'
apply plugin: 'jacoco'

group = 'org.sitmun'
version = '0.1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()    
}

// Dependencies to other SITMUN plugins must be declared all here to facilitate using them
// in different places of this script
ext {    
    sitmunlibs = [:]

    sitmunlibs.sitmuncore = [
        gitrepo : 'https://github.com/sitmun/sitmun-plugin-core.git',
        groupId : 'org.sitmun',
        artifactId : 'sitmun-plugin-core',
        version : '0.1.0-SNAPSHOT'
    ]
}

dependencies {
    sitmunlibs.each { k,v -> compile "${v.groupId}:${v.artifactId}:${v.version}" }
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
	if (project.hasProperty('oracle')) {
        compile 'com.zaxxer:HikariCP:2.6.0'
        compile 'com.oracle:ojdbc7:12.1.0.2'
    } else if (project.hasProperty('postgresql')) {
        compile 'com.zaxxer:HikariCP:2.6.0'
        compile 'org.postgresql:postgresql:42.2.2'
    } else {
        compile 'com.h2database:h2'
        compile 'org.springframework.boot:spring-boot-devtools'
    }
    //compile('org.springframework.boot:spring-boot-starter-web')   
    //compile 'com.zaxxer:HikariCP:2.6.0'
    //compile 'com.oracle:ojdbc7:12.1.0.2'
    //compile files('libs/ojdbc7-12.1.0.2.jar')   
    
}


def webappDir = "$projectDir/src/main/webapp"

sourceSets {
	main {
		resources {
			srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
		}
	}
}

/*
processResources {
	dependsOn "buildAngular"
}

//TODO task for copying angular libraries from other plugins
 

task buildAngular(type:Exec) {
	// installAngular should be run prior to this task
	//dependsOn "installAngular"
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	// Add task to the standard build group
	group = BasePlugin.BUILD_GROUP
	// ng doesn't exist as a file in windows -> ng.cmd
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "ng.cmd", "build"
	} else {
		commandLine "ng", "build"
	}
}

task installAngular(type:Exec) {
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "npm.cmd", "install"
	} else {
		commandLine "npm", "install"
	}
}

*/


publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId group
            artifactId 'sitmun-territorial-app'
            version version

            from components.java
        }
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'sitmun'
        property 'sonar.sources', 'src/main'
    }
}

task cloneDependencyRepos() {
    description = 'Clone the git repositories declared in sitmunlibs to a temporary directory.'            
    doLast {        
        // Create temporary directory
        ext.plugindir = File.createTempDir().toString()    
        sitmunlibs.each { k, v ->            
            grgit.clone(dir: "${cloneDependencyRepos.plugindir}/${v.artifactId}", uri: "${v.gitrepo}", refToCheckout: "${v.version}")
        }        
    }
}

task installDependencyRepos(dependsOn: 'cloneDependencyRepos') {    
    description = 'Install dependency repos, cleans and installs the git repositories declared in sitmunlibs in a temporary directory. Depends on cloneDependencyRepos.'        
    doLast {        
        // It creates a temporary GradleBuild task for each sitmun dependency in sitmunlibs
        // and runs the specified tasks for each
        sitmunlibs.each { k,v -> 
            def tempTask = tasks.create(name: "install_${v.artifactId}", type: GradleBuild)
            tempTask.buildFile = file("${cloneDependencyRepos.plugindir}/${v.artifactId}/build.gradle")            
            tempTask.tasks = ['clean', 'install']       
            tempTask.execute()
        }
        // Delete temporary directory        
        try {
            delete cloneDependencyRepos.plugindir
        } catch (Exception e) {
            println("Temp directory ${cloneDependencyRepos.plugindir} was not deleted. You can safely delete it afterwards.")
        }            
    }
}


task install(dependsOn: ['publishToMavenLocal', 'installDependencyRepos'])

